-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
int k1,k2;
int dp[101][101][2];
int mod=1e8;
int calc(int n1,int n2,bool f){
    if(n1+n2==0){return 1;}
    if(dp[n1][n2][f]!=-1){return dp[n1][n2][f];}
    dp[n1][n2][f]=0;
    if(f==0){
        for(int i=1;i<=min(n1,k1);i++){
            dp[n1][n2][f]=(dp[n1][n2][f]+calc(n1-i,n2,1-f))%mod;
        }
    }
    else{
        for(int i=1;i<=min(n2,k2);i++){
            dp[n1][n2][f]=(dp[n1][n2][f]+calc(n1,n2-i,f-1))%mod;
        }
    }
    return dp[n1][n2][f];
}
int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t;cin>>t;
    while(t--){
        int n1,n2;cin>>n1>>n2>>k1>>k2;
        memset(dp,-1,sizeof(dp));
        cout<<calc(n1,n2,0)+calc(n1,n2,1)<<endl;
    }
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution 1
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

const int mod=1e8;

int dp[101][101][2];
int k1,k2;

int calc(int n1, int n2, bool f) {
   if(n1 + n2 == 0)
       return 1;
   if(dp[n1][n2][f] != -1)
       return dp[n1][n2][f];
   
   dp[n1][n2][f]=0;
   if(f==0){
       for(int i = 1; i <= min(n1,k1); ++i) {
           dp[n1][n2][f] = (dp[n1][n2][f] + calc(n1-i,n2,1-f))%mod;
       }
   }
   else{
       for (int i = 1; i <= min(n2,k2); ++i) {
           dp[n1][n2][f] = (dp[n1][n2][f] + calc(n1,n2-i,1-f))%mod;
       }
   }
   return dp[n1][n2][f];
}

int main() {
   IOS
   int t;
   cin >> t;
   while (t--) {
       int n1, n2;
       cin >> n1 >> n2 >> k1 >> k2;
       for (int i = 0; i <= n1; ++i) {
           for (int j = 0; j <= n2; ++j) {
               dp[i][j][0]=dp[i][j][1]=-1;
           }
       }
       cout<<(calc(n1,n2,0) + calc(n1,n2,1))%mod<<"\n";
   }
   return 0;
}
