---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
int dp[501][501][501];int arr[501];
int n,m,b;
int mod=1e9+7;
int rec(int x,int y,int z){
    if(y<0||z<0){return 0;}
    if(x==n){
        if(y==0){return 1;}
        else return 0;
    }
    if(dp[x][y][z]!=-1){return dp[x][y][z];}
    int ans=0;
    ans=(ans+rec(x,y-1,z-arr[x]))%mod;
    ans=(ans+rec(x+1,y,z))%mod;
    dp[x][y][z]=ans;
    return dp[x][y][z];
}
int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin>>n>>m>>b;
    for(int i=0;i<n;i++){cin>>arr[i];}
    memset(dp,-1,sizeof(dp));
    cout<<rec(0,m,b)<<endl;
    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution 1
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long

const int mod = 1e9+7;

int dp[2][501][501];

signed main() {
   IOS
   int t = 1;
   while(t--) {
       int n, m, b;
       cin >> n >> m >> b;
       int a[n];
       for (int i = 0; i < n; ++i) {
           cin >> a[i];
       }
       for (int i = 0; i <= 1; ++i) {
           for (int j = 0; j <= m; ++j) {
               for (int k = 0; k <= b; ++k) {
                   dp[i][j][k]=0;
               }
           }
       }
       dp[0][0][0] = 1;
       for (int i = 1; i <= n; ++i) {
           int p = i & 1;
           for (int j = 0; j <= m; ++j) {
               for (int k = 0; k <= b; ++k) {
                   dp[p][j][k] = dp[p^1][j][k];
                   if(j && k >= a[i-1]) {
                       dp[p][j][k] = (dp[p][j][k] + dp[p][j-1][k-a[i-1]])%mod;
                   }
               }
           }
       }
       int ans = 0;
       for (int i = 0; i <= b; ++i) {
           ans = (ans + dp[n&1][m][i]) % mod;
       }
       cout << ans << "\n";
   }
   return 0;
}
